version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/bin/sh", "-c", "chmod +x /var/www/html/docker-entrypoint.sh && /var/www/html/docker-entrypoint.sh"]
    volumes:
      - ./:/var/www/html/
    depends_on:
      db:
        condition: service_healthy
      # Add dependency on the new sales/licensing app if it provides the license API
      # sales_licensing_app:
      #   condition: service_healthy
    environment:
      - DB_HOST=127.0.0.1
      - DB_NAME=network_monitor
      - DB_USER=user
      - DB_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=rootpassword
      - ADMIN_PASSWORD=password
      # New: License Management Environment Variables
      # IMPORTANT: Update LICENSE_API_URL to point to your actual sales_licensing_app API endpoint
      - LICENSE_API_URL=http://sales_licensing_app:80/api/v1/validate-license # Example: points to the new app's internal Docker network address
      - LICENSE_KEY=YOUR_PRODUCT_LICENSE_KEY_HERE # Replace with the actual license key for this deployment
    restart: unless-stopped
    network_mode: "host" # Keep host mode for ping functionality

  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: network_monitor
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Placeholder for your new PHP Sales & Licensing Application
  # You will replace this with your actual Dockerfile and configuration for the new app.
  # This service will manage its own Supabase connection and expose the license validation API.
  sales_licensing_app:
    build:
      context: ./new-php-app # You'll create this directory and its Dockerfile
      dockerfile: Dockerfile
    ports:
      - "8000:80" # Expose port 80 for the new app (or whatever port it uses)
    environment:
      # Supabase credentials for the new app
      - SUPABASE_URL=YOUR_SUPABASE_URL
      - SUPABASE_KEY=YOUR_SUPABASE_KEY
      # Other environment variables for your new PHP app
    volumes:
      - ./new-php-app:/var/www/html # Mount your new PHP app code here
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"] # Example health check
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data: